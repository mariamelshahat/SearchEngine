// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SearchEngine.Migrations
{
    [DbContext(typeof(SearchEngineContext))]
    partial class SearchEngineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Urlswithranks", b =>
                {
                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FileName")
                        .HasColumnType("int");

                    b.Property<double>("PageRank")
                        .HasColumnType("float");

                    b.HasKey("URL");

                    b.ToTable("Urlswithranks");
                });

            modelBuilder.Entity("inverted_index", b =>
                {
                    b.Property<string>("Word")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("Word", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("inverted_index");
                });

            modelBuilder.Entity("inverted_index", b =>
                {
                    b.HasOne("Urlswithranks", "UrlWithRank")
                        .WithMany("InvertedIndices")
                        .HasForeignKey("FileId")
                        .HasPrincipalKey("FileName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UrlWithRank");
                });

            modelBuilder.Entity("Urlswithranks", b =>
                {
                    b.Navigation("InvertedIndices");
                });
#pragma warning restore 612, 618
        }
    }
}
